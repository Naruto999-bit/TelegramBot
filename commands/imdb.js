const axios = require("axios");

module.exports = {
  name: "imdb",
  description: "Find movie or series details from IMDb",
  category: "search",
  usage: "imdb <movie/series name>",
  hasPermission: 0,
  cooldown: 3,
  credits: "MirryKal",

  run: async (ctx) => {
    const query = ctx.message.text.split(" ").slice(1).join(" ");
    if (!query) {
      return ctx.reply("тЭЧ рдХреГрдкрдпрд╛ рдХреЛрдИ рдлрд╝рд┐рд▓реНрдо рдпрд╛ рд╕реАрд░реАрдЬрд╝ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ!");
    }

    const apiKey = "8f50e26e"; // Replace with your OMDb API key
    const url = `http://www.omdbapi.com/?t=${encodeURIComponent(query)}&apikey=${apiKey}`;

    try {
      const res = await axios.get(url);
      const data = res.data;

      if (data.Response === "False") {
        return ctx.reply(`тЭМ IMDb рдкрд░ *${query}* рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред`);
      }

      let message = `ЁЯОм *${data.Title}* (${data.Year})\nтнР IMDB рд░реЗрдЯрд┐рдВрдЧ: ${data.imdbRating}/10\nЁЯОн Genre: ${data.Genre}\nЁЯОм рдбрд╛рдпрд░реЗрдХреНрдЯрд░: ${data.Director}\nЁЯУЬ рдХрд╣рд╛рдиреА: ${data.Plot}\nЁЯМН рджреЗрд╢: ${data.Country}\n\nЁЯФЧ IMDb: https://www.imdb.com/title/${data.imdbID}/`;

      if (data.Poster && data.Poster !== "N/A") {
        await ctx.replyWithPhoto({ url: data.Poster }, {
          caption: message,
          parse_mode: "Markdown"
        });
      } else {
        message += `\n\n_Poster available рдирд╣реАрдВ рд╣реИ_`;
        await ctx.reply(message, { parse_mode: "Markdown" });
      }

    } catch (error) {
      console.error("IMDb API Error:", error.message);
      ctx.reply("тЪая╕П IMDb API рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ!");
    }
  }
};
